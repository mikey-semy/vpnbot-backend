""" 
–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö:

PrettyFormatter: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
CustomJsonFormatter: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""
import json
import logging
from datetime import datetime

from shared.core.settings import settings


class PrettyFormatter(logging.Formatter):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
    –∞ —Ç–∞–∫–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ–¥–∑–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç extra-–∞—Ç—Ä–∏–±—É—Ç—ã,
    –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.

    Attributes:
        COLORS: –°–ª–æ–≤–∞—Ä—å —Å ANSI-–∫–æ–¥–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        EMOJIS: –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        RESET: ANSI-–∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    Usage:
        handler = logging.StreamHandler()
        handler.setFormatter(PrettyFormatter())
        logger.addHandler(handler)
    """
    COLORS = {
        "DEBUG": "\033[36m",  # Cyan
        "INFO": "\033[32m",  # Green
        "WARNING": "\033[33m",  # Yellow
        "ERROR": "\033[31m",  # Red
        "CRITICAL": "\033[41m",  # Red background
    }
    EMOJIS = {
        "DEBUG": "üîç",
        "INFO": "‚ú®",
        "WARNING": "‚ö†Ô∏è",
        "ERROR": "‚ùå",
        "CRITICAL": "üí•",
    }

    RESET = "\033[0m"

    def format(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞
        """
        standard_attrs = {
            "name",
            "msg",
            "args",
            "levelname",
            "levelno",
            "pathname",
            "filename",
            "module",
            "exc_info",
            "exc_text",
            "stack_info",
            "lineno",
            "funcName",
            "created",
            "msecs",
            "relativeCreated",
            "thread",
            "threadName",
            "processName",
            "process",
            "message",
            "asctime",
        }

        extra_attrs = {k: v for k, v in vars(record).items() if k not in standard_attrs}

        if extra_attrs:
            extra_msg = f"\033[33m[extra: {extra_attrs}]\033[0m"
        else:
            extra_msg = ""

        emoji = self.EMOJIS.get(record.levelname, "")

        base_msg = settings.logging.PRETTY_FORMAT % {
            "asctime": self.formatTime(record),
            "name": record.name,
            "levelname": f"{self.COLORS.get(record.levelname, '')}{record.levelname} {self.RESET}",
            "message": f"{emoji} {record.getMessage()}",
        }

        return f"{base_msg} {extra_msg}" if extra_msg else base_msg


class CustomJsonFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç,
    –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏.

    Usage:
        handler = logging.StreamHandler()
        handler.setFormatter(CustomJsonFormatter())
        logger.addHandler(handler)
    """
    def format(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        """
        log_data = settings.logging.JSON_FORMAT.copy()

        for key, value in log_data.items():
            if key == "timestamp":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
                dt = datetime.fromtimestamp(record.created)
                log_data[key] = dt.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
            else:
                log_data[key] = value % {
                    "asctime": self.formatTime(record),
                    "levelname": record.levelname,
                    "module": record.module,
                    "funcName": record.funcName,
                    "message": record.getMessage(),
                }

        return json.dumps(log_data, ensure_ascii=False)
